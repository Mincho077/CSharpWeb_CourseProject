// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyApp.Data;

#nullable disable

namespace PharmacyApp.Data.Migrations
{
    [DbContext(typeof(PharmacyAppDbContext))]
    partial class PharmacyAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "PenCef Pharma GmbH,Schiitzenanger 9,37081,Gottingen,Germany",
                            Name = "PenCef Pharma GmbH"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Trading Services Limited, Ireland",
                            Name = "GlaxoSmithKline "
                        },
                        new
                        {
                            Id = 3,
                            Address = "Austria",
                            Name = "Sandoz GmbH "
                        },
                        new
                        {
                            Id = 4,
                            Address = "124 Dvora HaNevi'a St. Tel Aviv 6944020, Israel",
                            Name = "Teva Pharmaceuticals"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Germany",
                            Name = "Berlin-Chemie AG"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActiveIngredientQuantity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineFormId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PharmacistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuantityInABox")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MedicineFormId");

                    b.HasIndex("MedicineTypeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacistId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c964e220-b801-42c2-b04b-14d541d63f9f"),
                            ActiveIngredient = "cefprozil",
                            ActiveIngredientQuantity = "500 mg",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9348),
                            ExpiryDate = new DateTime(2028, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://static.framar.bg/thumbs/6/products/cefzil-petstotin-mg.jpg",
                            ManufacturerId = 1,
                            MedicineFormId = 2,
                            MedicineTypeId = 1,
                            Name = "Cefzil",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 24.62m,
                            Quantity = 10,
                            QuantityInABox = "10 tb"
                        },
                        new
                        {
                            Id = new Guid("15562951-e3ac-4ef0-8f08-148aad0a5696"),
                            ActiveIngredient = "amoxicillin",
                            ActiveIngredientQuantity = "1000 mg",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9498),
                            ExpiryDate = new DateTime(2027, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://static.framar.bg/thumbs/6/products/ospamox-1000.jpg",
                            ManufacturerId = 1,
                            MedicineFormId = 1,
                            MedicineTypeId = 1,
                            Name = "Ospamox",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 5.87m,
                            Quantity = 10,
                            QuantityInABox = "14 tb"
                        },
                        new
                        {
                            Id = new Guid("d295eb84-65fe-4954-910b-a594ee51caef"),
                            ActiveIngredient = "bromazepam",
                            ActiveIngredientQuantity = "10 mg",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9515),
                            ExpiryDate = new DateTime(2026, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://static.framar.bg/thumbs/6/products/leksotan-tabletki-bromazepam-actavis-lexotan.jpg",
                            ManufacturerId = 3,
                            MedicineFormId = 1,
                            MedicineTypeId = 3,
                            Name = "Lexotan",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 5.87m,
                            Quantity = 10,
                            QuantityInABox = "30 tb"
                        },
                        new
                        {
                            Id = new Guid("1eb1760a-8c8d-428a-9210-2b397a5066de"),
                            ActiveIngredient = "diazepam",
                            ActiveIngredientQuantity = "3 mg",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9527),
                            ExpiryDate = new DateTime(2025, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://static.framar.bg/thumbs/6/products/diazepam-20tablets-5mg.jpg",
                            ManufacturerId = 3,
                            MedicineFormId = 1,
                            MedicineTypeId = 3,
                            Name = "Diazepam",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 5.87m,
                            Quantity = 10,
                            QuantityInABox = "20 tb"
                        },
                        new
                        {
                            Id = new Guid("c328b5e7-3345-48a9-a061-ebc56ff29d25"),
                            ActiveIngredient = "moxonidine",
                            ActiveIngredientQuantity = "0.4 mg",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9545),
                            ExpiryDate = new DateTime(2026, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://static.framar.bg/thumbs/6/products/moxogamma-4.jpg",
                            ManufacturerId = 4,
                            MedicineFormId = 1,
                            MedicineTypeId = 2,
                            Name = "Moxogamma",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 14.96m,
                            Quantity = 10,
                            QuantityInABox = "30 tb"
                        },
                        new
                        {
                            Id = new Guid("aac1406f-a4c0-4f2b-93e6-04de308251e0"),
                            ActiveIngredient = "bisoprolol fumarate",
                            ActiveIngredientQuantity = "5 mg",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9556),
                            ExpiryDate = new DateTime(2027, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://sopharmacy.bg/media/sys_master/h39/h8c/8930734538782.jpg",
                            ManufacturerId = 4,
                            MedicineFormId = 1,
                            MedicineTypeId = 2,
                            Name = "Bisogamma",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 5.50m,
                            Quantity = 10,
                            QuantityInABox = "30 tb"
                        },
                        new
                        {
                            Id = new Guid("8693253f-d026-4c92-aeb3-ba98069b720b"),
                            ActiveIngredient = "ambroxol hydrochloride",
                            ActiveIngredientQuantity = "15 mg/5 ml",
                            CreatedOn = new DateTime(2024, 11, 10, 7, 27, 20, 327, DateTimeKind.Utc).AddTicks(9566),
                            ExpiryDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://static.framar.bg/thumbs/6/products/flavamed-za-deca-berlin-chemie.jpg",
                            ManufacturerId = 5,
                            MedicineFormId = 3,
                            MedicineTypeId = 4,
                            Name = "Flavamed",
                            PharmacistId = new Guid("3315d47e-feb2-439b-a83e-75f96f97e14b"),
                            Price = 7.20m,
                            Quantity = 10,
                            QuantityInABox = "100 ml"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.MedicineForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("MedicineForm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tablet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "capsul"
                        },
                        new
                        {
                            Id = 3,
                            Name = "oral solution"
                        },
                        new
                        {
                            Id = 4,
                            Name = "oral suspension"
                        },
                        new
                        {
                            Id = 5,
                            Name = "cream"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ointment"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.MedicineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("MedicineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Antibiotic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GeneralPrescription"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Narcotic"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OTC"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Pharmacist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pharmacists");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Physician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UIN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Physicians");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Medicine", b =>
                {
                    b.HasOne("PharmacyApp.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Medicines")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmacyApp.Data.Models.MedicineForm", "MedicineForm")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApp.Data.Models.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", "Patient")
                        .WithMany("PrescribedMedicines")
                        .HasForeignKey("PatientId");

                    b.HasOne("PharmacyApp.Data.Models.Pharmacist", "Pharmacist")
                        .WithMany()
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("MedicineForm");

                    b.Navigation("MedicineType");

                    b.Navigation("Patient");

                    b.Navigation("Pharmacist");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Pharmacist", b =>
                {
                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Physician", b =>
                {
                    b.HasOne("PharmacyApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("PrescribedMedicines");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.Manufacturer", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.MedicineForm", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("PharmacyApp.Data.Models.MedicineType", b =>
                {
                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
